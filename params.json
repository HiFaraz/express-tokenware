{"name":"express-tokenware","tagline":"Flexible and minimalist token-based authentication middleware for express.","body":"# Quick start\r\n\r\n```javascript\r\nvar tokenware = require('express-tokenware')('mySecretKey');\r\nvar app = tokenware(express);\r\n\r\napp.get('/authenticate',\r\n  someAuthenticationMiddleware,\r\n  somePayloadCreationMiddleware\r\n);\r\n\r\napp.get('/myProtectedPath',\r\n  function (req, res, next) {\r\n    // success, do something with req.decodedBearerToken here\r\n  });\r\n\r\napp.listen(3000);\r\n```\r\n\r\n# 1. Installation\r\n\r\n```bash\r\n$ npm install express-tokenware\r\n```\r\n\r\n# 2. Testing\r\n\r\nAll `express-tokenware` behaviours have been tested using [jasmine](https://www.npmjs.com/package/jasmine).\r\n\r\n```bash\r\n$ npm test\r\n```\r\n\r\n# 3. Features / high-level behaviours\r\n\r\n* Uses [JSON Web Tokens](https://tools.ietf.org/html/rfc7519) (JWT)\r\n* Flexible data structure - store whatever you like in the token\r\n* Provides tokens on sign-in/authentication\r\n* Extracts bearer tokens from request header\r\n* Checks tokens on incoming requests\r\n* Handles anonymous requests\r\n* Rejects expired tokens\r\n* Allows custom error handling\r\n* Checks revoked tokens\r\n\r\n# 4. Philosophy\r\n\r\n* behaviour driven-development\r\n* do the work for the user, such as sandwiching the stack with one function\r\n* unopinionated, provide an interface that can be used with any architecture or database\r\n\r\n\r\n# 5. Documentation\r\n\r\nWhere not specified, variables are defined as per [auth0/node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) documentation.\r\n\r\n## 5.1 Configuration\r\nInclude `express-tokenware` in your project by calling:\r\n\r\n```javascript\r\nvar tokenware = require('express-tokenware')(secretOrPrivateKey, [options, isRevokedToken]);\r\n```\r\n\r\n`options` refers to configuration parameters that govern both signing and verification of bearer tokens. It must be an object literal that may include any or all of the following 7 parameters:\r\n\r\n* `algorithm`\r\n* `expiresIn`\r\n* `audience`\r\n* `issuer`\r\n* `allowAnonymous` set this to `true` to allow anonymous requests (default: `false`)\r\n* `handleErrors` set this to `false` to use a custom error-handling middleware (default: `true`)\r\n\r\n`isRevokedToken` is a callback which can accept a token string and return `true` if the token has been revoked or `false` if the token has not been revoked.\r\n\r\n## 5.2 Initialization\r\n\r\nAttach `tokenware` to your application. This will allow bearer tokens to be received, verify any bearer tokens found on incoming requests, and send signed tokens on responses with token payloads.\r\n\r\n```javascript\r\nvar app = tokenware(express);\r\n```\r\n\r\n`express` is injected as a dependency into `tokenware`. This ensures that `tokenware` is both the first and last middleware to execute, which allows it to be used for both authenticating users and authorizing requests.\r\n\r\n## 5.3 Sign-in/authentication\r\nOnce your application has authenticated a user and created a payload for the bearer token, create a payload **object** at `res.bearerTokenPayload` and call `next()` in your last route middleware. `tokenware` will send the signed token to the user as a JSON object `{\"signedBearerToken\": <token>}`, along with an `OK` HTTP header status of `200`.\r\n\r\nThis example is a simple implementation of sign-in/authentication:\r\n\r\n```javascript\r\napp.get('/authenticate',\r\n  someAuthenticationMiddleware,\r\n  somePayloadCreationMiddleware // this **must** call `next()` to send a signed token\r\n);\r\n```\r\n\r\n## 5.4 Extracting signed bearer tokens from incoming requests\r\n\r\n`express-tokenware` looks for tokens in the `authorization` header in the form of `'Bearer <token>'` (case-sensitive).\r\n\r\n## 5.5 Verifying signed bearer tokens\r\n\r\n`express-tokenware` automatically verifies any bearer token found in an incoming request. This guarantees that the token has a valid signature. An alternate approach of verifying against tokens stored in a database is not supported by this module, as the stored tokens may be tampered with by an attacker.\r\n\r\nIf `tokenware` successfully verifies the signed bearer token, it will attach the decoded bearer token to `req.decodedBearerToken` and call the next middleware function. If it fails to verify the token, it will invoke an error which will be passed to the error-handling middleware in the stack.\r\n\r\nThis example verifies tokens with the default configuration:\r\n\r\n```javascript\r\napp.get('/myProtectedPath',\r\n  function (req, res, next) {\r\n    // success, do something with req.decodedBearerToken here\r\n  }\r\n);\r\n```\r\nIf you would like to allow anonymous requests to your server, set the configuration option `allowAnonymous` to `true`. Subsequent middleware can detect anonymous requests by checking `req.isAnonymous`. This example demonstrates how to differentiate between authorized and anonymous requests:\r\n\r\n```javascript\r\napp.get('/myProtectedPath',\r\n  function (req, res, next) {\r\n    if (req.isAnonymous) {\r\n      // anonymous request\r\n    } else {\r\n      // not anonymous, do something with req.decodedBearerToken here\r\n    }\r\n  }\r\n);\r\n```\r\n\r\n# 6. Error handling\r\n\r\n`express-tokenware` comes with a built-in error-handling, however, it may be replaced with a custom middleware. This section provides information on building a custom error-handling middleware.\r\n\r\nThe error object passed to the middleware will have at least two properties:\r\n\r\n* `name`\r\n* `message`\r\n\r\nThis table lists the errors sent by `express-tokenware`:\r\n\r\nName|Message\r\n---|---\r\nJsonWebTokenError|(variable, generated by [auth0/node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken))\r\nmalformedAuthorizationHeader|Authorization header is malformed, should be in the form of: Bearer <token>\r\nrevokedToken|Request authorization was previously revoked\r\nTokenExpiredError|jwt expired (generated by [auth0/node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken))\r\n\r\nIf anonymous requests are allowed (through the configuration parameter `allowAnonymous`) then unauthorized requests are not treated as an error. In this case, an error-handling middleware may not be necessary.\r\n\r\n# 7. Issues and pull requests\r\n\r\nFeedback and contribution are highly encouraged! Please report feedback through the [Github issue tracker](https://github.com/HiFaraz/express-tokenware/issues). To submit code, please fork the [Github repository](https://github.com/HiFaraz/express-tokenware) and send a pull request.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}