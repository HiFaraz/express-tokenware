{"name":"express-tokenware","tagline":"Flexible and minimalist token-based authentication middleware for express.","body":"# Quick start\r\n\r\n```javascript\r\nvar tokenware = require('express-tokenware')('mySecretKey');\r\napp.use(tokenware.setHeaders);\r\n\r\napp.get('/authenticate',\r\n  someAuthenticationMiddleware,\r\n  somePayloadCreationMiddleware,\r\n  tokenware.sign,\r\n  tokenware.send,\r\n  tokenware.errorHandler\r\n);\r\n\r\napp.get('/myProtectedPath',\r\n  tokenware.verify,\r\n  function (req, res, next) {\r\n    // success, do something with req.decodedBearerToken here\r\n  },\r\n  tokenware.errorHandler\r\n);\r\n\r\napp.listen(3000);\r\n```\r\n\r\n# Installation\r\n\r\n```bash\r\n$ npm install express-tokenware\r\n```\r\n\r\n# Features\r\n\r\n* Uses [JSON Web Tokens](https://tools.ietf.org/html/rfc7519) (JWT)\r\n* Flexible data structure - store whatever you like in the token\r\n* Provides tokens on sign-in/authentication\r\n* Extracts bearer tokens from request header\r\n* Checks tokens on incoming requests\r\n* Handles anonymous requests\r\n* Rejects expired tokens\r\n* Detailed built-in error handling\r\n* Allows custom error handling\r\n* Checks revoked tokens\r\n\r\n# Philosophy\r\n\r\nBe unopinionated: don't limit database or architecture options, simply provide basic token functionality that's easy to integrate with the stack.\r\n\r\n# Documentation\r\n\r\nWhere not specified, variables are defined as per [auth0/node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) documentation.\r\n\r\n## Configuration\r\nDefine `express-tokenware` in your project by calling:\r\n\r\n```javascript\r\nvar tokenware = require('express-tokenware')(secretOrPrivateKey, [options, isRevokedToken]);\r\n```\r\n\r\n`options` refers to configuration parameters that will govern both signing and verification of bearer tokens. It must be an object literal that may include any or all of the following 5 parameters:\r\n\r\n* `algorithm`\r\n* `expiresIn`\r\n* `audience`\r\n* `issuer`\r\n* `allowAnonymous` set this to `true` to allow anonymous requests (default: false)\r\n\r\n`isRevokedToken` is a callback which can accept a token string and return `true` if the token has been revoked or `false` if the token has not been revoked.\r\n\r\nAttach the `tokenware.setHeaders` middleware to allow bearer tokens within a request header:\r\n\r\n```javascript\r\napp.use(tokenware.setHeaders);\r\n```\r\n\r\n## Sign-in/authentication\r\nOnce your application has authenticated a user and created a payload for the bearer token, use the `tokenware.sign` middleware to sign the token. This will:\r\n\r\n1. look for the payload at `req.bearerTokenPayload`,\r\n2. store a signed bearer token at `req.signedBearerToken`, and\r\n3. call the next middleware function.\r\n\r\n\r\nSubsequent middleware functions may perform any number of actions on the signed bearer token, such as storing it in a database or sending it to the user, depending on your application design. `express-tokenware` does not assume any particular database technology  and leaves database interaction up to your application middleware. It provides a convenience middleware function called `tokenware.send` for sending the signed bearer token to the user at `res.signedBearerToken`, along with a HTTP header status of `200`.\r\n\r\nThis example is a simple implementation of `tokenware.sign` and `tokenware.send`:\r\n\r\n```javascript\r\napp.get('/authenticate',\r\n  someAuthenticationMiddleware,\r\n  somePayloadCreationMiddleware,\r\n  tokenware.sign,\r\n  tokenware.send,\r\n  tokenware.errorHandler\r\n);\r\n```\r\n\r\nThis example adds some complexity by performing an action on the signed bearer token before sending it as a response:\r\n\r\n```javascript\r\napp.get('/authenticate',\r\n  someAuthenticationMiddleware,\r\n  somePayloadCreationMiddleware,\r\n  tokenware.sign,\r\n  someTokenStorageMiddleware,\r\n  tokenware.send,\r\n  tokenware.errorHandler\r\n);\r\n```\r\n\r\n## Extracting signed bearer tokens from incoming requests\r\n\r\n`express-tokenware` looks for tokens in the `authorization` header in the form of `'Bearer <token>'` (case-sensitive).\r\n\r\n## Verifying signed bearer tokens\r\n\r\nThe recommended way to verify signed bearer tokens is the use the `tokenware.verify` middleware. Although you may wish to verify against tokens stored in a database, this is not a safe approach as the stored tokens may be tampered by an attacker. Using the middleware provided ensures that the token has a valid signature.\r\n\r\nIf `tokenware.verify` successfully verifies the signed bearer token, it will attach the decoded bearer token to `req.decodedBearerToken` and call the next middleware function. If it fails to verify the token, it will invoke an error which will be passed to the error-handling middleware in the stack.\r\n\r\nThis example verifies tokens with the default configuration:\r\n\r\n```javascript\r\napp.get('/myProtectedPath',\r\n  tokenware.verify,\r\n  function (req, res, next) {\r\n    // success, do something with req.decodedBearerToken here\r\n  },\r\n  tokenware.errorHandler\r\n);\r\n```\r\nInvalid tokens are treated as errors and are passed to `token.errorHandler`.\r\n\r\nIn the case of anonymous requests, `tokenware.verify` sets `req.isAnonymous` to `true`. This example verifies tokens and also detects anonymous requests (allowed through configuration parameters):\r\n\r\n```javascript\r\napp.get('/myProtectedPath',\r\n  tokenware.verify,\r\n  function (req, res, next) {\r\n    if (req.isAnonymous) {\r\n      // anonymous request\r\n    } else {\r\n      // not anonymous, do something with req.decodedBearerToken here\r\n    }\r\n  }\r\n);\r\n```\r\n\r\nIn the above example, there is no need to call `token.errorHandler` because invalid tokens are not treated as errors.\r\n\r\n## Error handling\r\n\r\n`express-tokenware` provides `tokenware.errorHandler` as a convenient error-handling middleware, however, it may be replaced with a custom middleware. This section provides information on building a custom error-handling middleware.\r\n\r\nThe error object passed to the middleware will have at least two properties:\r\n\r\n* `name`\r\n* `message`\r\n\r\nThis table lists the errors sent by `express-tokenware`:\r\n\r\nName|Message|Invoked by\r\n---|---|---\r\npayloadMissing|Missing bearer token payload|`tokenware.send`\r\nsignedBearerTokenMissing|Missing signed bearer token|`tokenware.send`\r\nJsonWebTokenError|(variable, generated by [auth0/node-jsonwebtoken](https://github.com/auth0/node-jsonwebtoken))|`tokenware.verify`\r\nmalformedAuthorizationHeader|Authorization header is malformed, should be in the form of: Bearer <token>|`tokenware.verify`\r\nnoAuthorizationHeader|Request is missing authorization header|`tokenware.verify`\r\nrevokedToken|Request authorization was previously revoked|`tokenware.verify`\r\nTokenExpiredError|jwt expired (generated by auth0/node-jsonwebtoken)|`tokenware.verify`\r\nunknown|Could not verify token, likely that \"iat\" claim is missing from the token|`tokenware.verify`\r\n\r\nIf anonymous requests are allowed (through the configuration parameter `options.allowAnonymous`) then invalid tokens are not treated as an error. In this case, an error-handling middleware may not be necessary.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}